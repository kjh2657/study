buildscript {
    ext {
        springBootVersion = '2.5.5'
        springCloudVersion = '2020.0.4'
        queryDslVersion = '4.4.0'
    }
    repositories {
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "io.spring.gradle:dependency-management-plugin:1.0.11.RELEASE"
        classpath "com.epages:restdocs-api-spec-gradle-plugin:0.12.0"
        classpath "org.hibernate:hibernate-gradle-plugin:5.4.32.Final"
    }
}


subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.epages.restdocs-api-spec'

    sourceCompatibility = 11

    repositories {
        mavenCentral()
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    // 모든 모듈에서 사용하는 라이브러리
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-validation'


        implementation 'junit:junit:4.12'
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor(
                'org.projectlombok:lombok',
                'org.projectlombok:lombok-mapstruct-binding:0.1.0'
        )

        implementation 'org.mapstruct:mapstruct:1.4.2.Final'
        annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'

        // QueryDSL
        implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
        annotationProcessor(
                "javax.persistence:javax.persistence-api",
                "javax.annotation:javax.annotation-api",
                "com.querydsl:querydsl-apt:${queryDslVersion}:jpa")

        // mybatis
        implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.4'

        // Feign
        implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

        implementation 'org.apache.commons:commons-lang3:3.9'

        runtimeOnly 'mysql:mysql-connector-java'
        runtimeOnly 'com.microsoft.sqlserver:mssql-jdbc'
        runtimeOnly 'com.h2database:h2'

        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        annotationProcessor 'org.projectlombok:lombok'
        implementation 'org.springframework.boot:spring-boot-starter-test'
        implementation 'com.epages:restdocs-api-spec-mockmvc:0.12.0'
        testImplementation 'org.assertj:assertj-core:3.6.1'
        implementation 'com.vladmihalcea:hibernate-types-52:2.9.13'
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    test {
        useJUnitPlatform()
    }
}


project(':study-server') {
    // api 모듈에만 필요한 라이브러리가 발생하면 이곳에 추가한다.
    dependencies {
    }
}

project(':study-client') {
    // admin 모듈에만 필요한 라이브러리가 발생하면 이곳에 추가한다.
    dependencies {

    }

}

